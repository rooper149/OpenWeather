using StationListBuilder;
using System.Text;
using System.Text.RegularExpressions;

public class Program
{
    public static void Main(string[] args)
    {
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.WriteLine("Origional file maintained by Greg Thompson at https://www.aviationweather.gov/docs/metar/stations.txt\n");
        Console.ForegroundColor = ConsoleColor.Gray;
        Console.WriteLine(@"Downloading csv file...");
        using var client = new HttpClient();
        using var response = client.GetAsync(@"https://www.aviationweather.gov/docs/metar/stations.txt").Result;
        using var stream = response.Content.ReadAsStreamAsync().Result;
        Console.WriteLine($"Stations list updated: {response.Content.Headers.LastModified}\n");

        var reader = new StreamReader(stream);
        var text = reader.ReadToEnd();
        var lines = Regex.Split(text, "\r\n|\r|\n").ToList();
        lines = lines.Where(x => !x.StartsWith(@"!")).ToList();

        //get all the blank seperator lines
        int index = 0;
        var sections = new List<int>();
        foreach (var line in lines)
        {
            if (string.IsNullOrEmpty(line) || string.IsNullOrWhiteSpace(line)) { sections.Add(index); }
            index++;
        }

        //remove the blank lines and section headers
        int count = 0;
        foreach (var section in sections)
        {
            lines.RemoveAt(section - count);

            if (sections.Last().Equals(section)) { break; }//the last line is just a single blank line

            lines.RemoveAt(section - count);
            lines.RemoveAt(section - count);
            count += 3;
        }

        //parse all the data into a Station struct
        //only interested in stations that have an ICAO code
        var stations = lines.Select(x => new Station(x));

        foreach (var station in stations.Where(x => string.IsNullOrEmpty(x.ICAO)))
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine($@"Rejected {station.STATION}, missing ICAO code.");
        }

        stations = stations.Where(x => !string.IsNullOrEmpty(x.ICAO));
        Console.ForegroundColor = ConsoleColor.Gray;
        Console.WriteLine(@"Stations parsed, generating C# Dictionary...");

        var sb = new StringBuilder();
        sb.AppendLine(@"namespace OpenWeather.Data");
        sb.AppendLine(@"{");
        sb.AppendLine(@"public static class StationDictionary");
        sb.AppendLine(@"{");
        sb.AppendLine($@"//last updated {response.Content.Headers.LastModified}");
        sb.AppendLine($@"//generated from Greg Thompson's file at https://www.aviationweather.gov/docs/metar/stations.txt");
        sb.AppendLine($@"//generated by the OpenWeather project https://github.com/rooper149/OpenWeather");
        sb.AppendLine(@"public static Dictionary<string, StationInfo> _Dictionary = new()");
        sb.AppendLine(@"{");   

        foreach(var station in stations)
        {
            var elev = int.Parse(station.ELEV);
            var lat = DegreesMinutesToDecimal(station.LAT);
            var lon = DegreesMinutesToDecimal(station.LON);

            //StationInfo(string icao, string name, int elevation, string country, string region, double lat, double lon)
            sb.AppendLine($@"{{ @""{station.ICAO}"", new StationInfo(""{station.ICAO}"", ""{station.STATION}"", {elev}, ""{station.CC}"", ""{station.CD}"", {lat}, {lon}) }},");
        }

        sb.AppendLine(@"};}}");
        File.WriteAllText(@"output.cs", sb.ToString());
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine(@"Output saved to output.cs.");
        Console.ForegroundColor = ConsoleColor.Gray;
        Console.WriteLine(@"Return to exit.");
        Console.ReadLine();
    }

    public static double DegreesMinutesToDecimal(string point)
    {
        var multiplier = (point.Contains("S") || point.Contains("W")) ? -1 : 1;
        point = Regex.Replace(point, "[^0-9. ]", "");
        var pointArray = point.Split(' ');//split the string.

        var degrees = double.Parse(pointArray[0]);
        var minutes = double.Parse(pointArray[1]) / 60;
        return Math.Truncate(((degrees + minutes) * multiplier) * 100000) / 100000;//truncate to 5 points
    }
}
